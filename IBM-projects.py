# -*- coding: utf-8 -*-
"""citizen ai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y8Ych6hB8sR4jZNPdV1FmNREO7EfI0TX
"""

!pip install transformers torch gradio pypdf2  -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)

    if torch.cuda.is_available():
        inputs={k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

def city_analysis(city_name):
    prompt =f"provide a detailed analysis of{city_name} including:\n" \
       "1.crime index and safety satistics\n"\
       "2. accident rates and traffic safety information\n"\
       "3.overall safety assessment\n\n"\
         f"city: {city_name}"
    return generate_response(prompt, max_length=1000)

def generate_prompt(query):
    prompt =f"as a government assistant,provide accurate and helpful information about the following citizen query related to public services, government policies, or civic issues:\n" \
        f"query: {query}"
    return generate_response(prompt, max_length=1000)

# Create Gradio interface
with gr.Blocks() as app:
    gr.Markdown("# city analysis & citizen services AI")

    with gr.Tabs():
        with gr.TabItem("city analysis"):
            with gr.Row():
                with gr.Column():
                    city_input = gr.Textbox(
                        label="Enter city Name",
                        placeholder="e.g., New york,London,Mumbai...",
                        lines=1
                    )
                    analyze_btn = gr.Button("analyze city")

                with gr.Column():
                    city_output = gr.Textbox(label="city analysis(crime index & accidents)", lines=15)

            analyze_btn.click(city_analysis, inputs=city_input, outputs=city_output)

        with gr.TabItem("citizen services"):
            with gr.Row():
                with gr.Column():
                    citizen_query = gr.Textbox(
                        label="your query",
                        placeholder="Ask about public services,government policies,civic issues...",
                        lines=4
                    )
                    query_btn = gr.Button("Get information")

                with gr.Column():
                    citizen_output = gr.Textbox(label="Government response", lines=15)

            query_btn.click(generate_prompt, inputs=citizen_query, outputs=citizen_output)

app.launch(share=True)

from google.colab import drive
drive.mount('/content/drive')

